---
title: "final"
format: html
---
repo: https://github.com/wywydubs/ENVS-193DS_spring-2025_final
```{r set up, message=FALSE, warning=FALSE}
library(tidyverse) # Load packages (based on hw 3 packages)
library(here)
library(gt) # chose gt

library(janitor) # Optional packages
library(readxl)
library(readr)
sst <- read_csv(here("data", "SST_update2023.csv"))
```



# Problem 1

## a. Transparent statistical methods

In part 1 they used some type of correlation test. In part two they used an 
ANOVA test. 

## b. More information needed

Effect size could be helpful in this context, as it would tell us more about
the strength of the data, which would give more real world application (ex.
a large effect size would explain a substantial nitrogen load difference. 
Actually presenting the means and their standard deviations in some way would 
also help, as this would give a digestible way to actually view the data, not 
just the conclusion from the data (ex. mean fertilizer samples had x amount of 
nitrogen present). 


## c. Suggestions for Rewriting

1. We found significant correlation between distance from headwater (km) 
and annual total nitrogen load (kg year^-1), telling us that there is a
relationship between the two likely due to impacts from the runoff surrounding 
the headwaters. correlation test (pearson?) (r = correlation 
coefficient, p = 0.03, α = significance level)

2. The source of the runoff has a statistically significant effect on the
average annual nitrogen load, telling us that nitrogen loads vary based on
where runoff is coming from (urban land, atmospheric deposition, fertilizer, 
wastewater treatment, and grasslands). (ANOVA: F = F-statistic, p = 0.02, η² = 
effect size, α = significance level).


# Problem 2

## a. data cleaning and summarizing 

```{r}
sst_clean <- sst |> # rename
  mutate(
    year  = year(date),
    month = month(date)) |>  # create new columns
      
    filter(year >= 2018)|>  # filter to match structure
  group_by(year, month) |> # group by new columns 
  summarize(
    mean_monthly_sst = mean(temp), # add in mean 
    .groups = 'drop') |> # make output ungrouped 
  # (ChatGPT troubleshooting suggestion)
  
  mutate(
    year = factor(year), # convert column to ordered month list (abbreviated)
     month = factor(month, levels = 1:12, labels = month.abb, ordered = TRUE) 
  ) 
```

  
